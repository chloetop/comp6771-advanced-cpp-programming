bplist00Ñ_WebMainResourceÕ	
_WebResourceTextEncodingName_WebResourceFrameName^WebResourceURL_WebResourceData_WebResourceMIMETypeUUTF-8Tmain_Bhttps://www.cse.unsw.edu.au/~cs6771/16s2/solutions/tute05_sol.htmlO&D<html><head><title>COMP6771, Tutorial - Week 5</title></head>
<body alink="#660000" bgcolor="#ffffff" link="#800066" vlink="#000066" marginwidth="10" marginheight="0">

<table align="center" border="0" width="95%"><tbody><tr><td>

<h2><p></p><center><b>
COMP6771 â€“ Advanced C++ Programming<br>
Session 2, 2016
</b></center><p></p></h2>

<h2><p></p><center><b>Tutorial â€“ Week 5<br>Solutions</b></center><p></p></h2>

<hr align="left">

<h3>Tutorial Solutions</h3>

Please let us know if you find any mistakes in these solutions.

<ol>

<li>
After the 2nd assignment
<pre>vector v2 = std::move(v1);
</pre>
its internal "resources" have been moved to <tt>v2</tt> and
<tt>v1</tt> has been put in a valid state. However,
we cannot make any assumption about what the value is in
<tt>v1</tt>. The author of this code appears to have relied
on the assumption that <tt>v1</tt> is empty after the
2nd assignment. Unfortunately, this assumption cannot be
guaranteed.

</li><li><p>
The output is:
</p><pre>s1: abc
s1: 
s2: abc
s3: abc
s1: 
s2: xyz
s3: xyz
s1: 
s2: 
s3: 
s4: xyz
</pre>
Here is what the C++ standard says about the moved-from
state of library types:
<q>
Objects of types defined in the C++ standard library may be moved from. Move operations may be explicitly specified or implicitly generated. Unless otherwise specified, such moved-from objects shall be placed in a valid but unspecified state.
</q>
<p>
The C++ string appears to have reset a moved-from string
into an empty string. But the client cannot rely on this
as the default behavior.
</p><pre>  string s1 = "abc";
  cout &lt;&lt; "s1: " &lt;&lt; s1 &lt;&lt; endl; 
  string s2 = std::move(s1);         // s1 has been moved with its state being an empty string
  string &amp;&amp;s3 = std::move(s2);       // s2 and s3 are aliases
  s3 = "xyz";                        // both s2 and s3 are re-assigned
  cout &lt;&lt; "s1: " &lt;&lt; s1 &lt;&lt; endl; 
  cout &lt;&lt; "s2: " &lt;&lt; s2 &lt;&lt; endl; 
  cout &lt;&lt; "s3: " &lt;&lt; s3 &lt;&lt; endl; 
  string s4 = std::move(s3);        // s3 has been moved when it is still an alias of s2
  cout &lt;&lt; "s1: " &lt;&lt; s1 &lt;&lt; endl; 
  cout &lt;&lt; "s2: " &lt;&lt; s2 &lt;&lt; endl; 
  cout &lt;&lt; "s3: " &lt;&lt; s3 &lt;&lt; endl; 
  cout &lt;&lt; "s4: " &lt;&lt; s4 &lt;&lt; endl; 
</pre>

</li><li>
<pre>    const string &amp;s1 = string("xyz");             // ok: a const lvalue reference to a temporary string (an rvalue)
    string &amp;s2 = string("xyz");                   // error: cannot declare a non-const lvalue reference to a temporary string (an rvalue)
    string &amp;&amp;s3 = string("abc") + string("xyz");  // ok: an rvalue reference to a temporary string (an rvalue)
    string s4("abc");                             // ok: a string declaration
    string &amp;&amp;s5 = std::move(s4);                  // ok: an rvalue reference as s4 has been cast into an rvalue
    string &amp;&amp;s6 = s5;                             // error: s5 is an rvalue reference but an lvalue itself
                                                  // NOTE: lvalue and rvalue references are lvalues
    string &amp;s7 = s5;                              // ok: a non-const reference to an lvalue

    string * &amp;&amp;p1 = new string("abc");            // ok: an rvalue reference to a temporary object of type string* (an rvalue)
    string * const &amp;p2 = new string("abc")        // ok: a const lvalue reference to a temporary object of type string* (an rvalue)
    string * &amp;p2 = new string("abc")              // error: the lvalue must be const as the heap object is an rvalue
</pre>
Please read this nice tutorial on rvalue references:
<pre>http://thbecker.net/articles/rvalue_references/section_01.html
</pre>

</li><li>
<p> The detailed answer can be found at
</p><pre>http://herbsutter.com/2013/05/20/gotw-4-class-mechanics
</pre>
The following problems are identified:
<ol>
<li> The default constructor is missing.
</li><li> operator+ passes by value. The guideline is to prefer
(1) passing a read-only parameter by const&amp; if you are
 only going to read from it (not make a copy of it)
and (2) passing a read-only parameter by value if 
you're going to make a copy of the parameter anyway, because it enables move from rvalue arguments.
</li><li>  operator+ modifies this object's value.
</li><li>  operator+ is not written in terms of operator+= (which is missing).
</li><li>  operator+ should not be a member function.
</li><li> operator&lt;&lt; should not be a member function.
</li><li> operator&lt;&lt; should return ostream&amp;.
</li><li> The preincrement operator's return type is incorrect.
</li><li> Postincrement should be implemented in terms of preincrement.
</li></ol>
A corrected version is:
<pre>class complex {
public:
    complex( double r = 0, double i = 0 )
        : real{r}, imag(i)
    { }

    complex&amp; operator+=( const complex&amp; other ) {
        real += other.real;
        imag += other.imag;
        return *this;
    }

    complex&amp; operator++() {
        ++real;
        return *this;
    }

    complex operator++( int ) {
        auto temp = *this;
        ++*this;
        return temp;
    }

    ostream&amp; print( ostream&amp; os ) const {
        return os &lt;&lt; "(" &lt;&lt; real &lt;&lt; "," &lt;&lt; imag &lt;&lt; ")";
    }

private:
    double real, imag;
};

complex operator+( complex lhs, const complex&amp; rhs ) {
    lhs += rhs;
    return lhs;
}

// Another solution could be
complex operator+( complex &amp;lhs, const complex&amp; rhs ) {
    complex tmp = lhs;
    tmp += rhs;
    return tmp;
}

ostream&amp; operator&lt;&lt;( ostream&amp; os, const complex&amp; c ) {
    return c.print(os);
}
// Alternatively, you can declare operator &lt;&lt; as a
// friend function of complex by avoiding the member
// function print altogether

ostream&amp; operator&lt;&lt;( ostream&amp; os, const complex&amp; c ) {
     os &lt;&lt; "(" &lt;&lt; real &lt;&lt; "," &lt;&lt; imag &lt;&lt; ")";
     return os; 
}
</pre> 


</li><li>
<p> <tt> std::cout &lt;&lt; "COMP6771" </tt> 
is equivalent to: <tt>
  operator&lt;&lt;(std::cout, "COM6771"</tt>.
In this case, the function
<tt> std::ostream&amp; std::operator&lt;&lt;(std::ostream&amp;, const char*)</tt>, which is defined in the namespace std
is found through ADL.

</p></li><li>
<p> Unlike Java, C++ makes name lookup very complex, because
unqualified rather than fully-qualified names are
often used. Every C++ programmer should understand the
basic ideas behind the name lookup rules used in C++.
</p><pre>namespace A
{
  void f(int x) {}; 
}

namespace B
{
  struct S {}; 

  void f(S) {};

  void f(int, int) {};

  void test1() {
    using namespace A; // using DIRECTIVE
    f(1);       // ERROR  namespace A is not considered because
                // B contains two overloads for 'f'
    f(1,2);     // OK     B::f(int,int)
    f(B::S());  // OK     B::f(S)
  }   
  void test2() {
    using A::f; // using DECLARATION
    f(1);       // OK     A::f(int)
    f(1,2);     // ERROR  A::f  hides  B::f(int,int)
    f(B::S());  // OK     B::f(S) due to ADL!
  }
}

namespace C {
  void test3() {
    using namespace A; // using DIRECTIVE
    f(1);       // OK     A::f(int)
    f(B::S());  // OK     B::f(S) due to ADL!
  }   

  void test4() {
    using A::f; // using DECLARATION
    f(1);       // OK     A::f(int)
    f(B::S());  // OK     B::f(S) due to ADL!
  }
}
</pre>
A using declaration introduces a declaration in the current scope. The compiler checks scopes from innermost to outermost and stops immediately once it has found declarations in the current scope of question. This is why one function can hide other functions. Hence, the 2nd error.
<p>
A using directive temporarily injects the namespace's
 names in the global scope (::) so they are also considered in the above search when the outermost scope is checked for names. This may lead to ambiguities. 
</p><p>
The names found so far are part of the overload
resolution  set. Note that the names from outer scopes are hidden and 
not part of this set. Hence, the first error.
</p><p>
With ADL, the scopes associated with the arguments of user-defined types of a function are searched. Found names are added to the overload resolution set. Hence, the correct resolution
for the last call <tt>f(B::S())</tt>.

</p></li><li>
<p>The member access arrow (<tt>-&gt;</tt>) operator would take as argument an identifier, i.e.,
the name of the member to be accessed, however this is not possible in C++ (no eval!). Instead
a compiler trick is applied, this operator takes no arguments and the compiler applies 
the&nbsp;<tt>-&gt;</tt><i>identifier</i> part to the <i>return</i> value of this operator. 
As a result, this overloaded operator <i>must always</i> return either a pointer to a class
type or an object of a class type that defines its own <tt>-&gt;</tt> operator.

</p></li><li>
<p>A C++ <i>smart pointer</i> is a class that behaves like a pointer but provides 
other functionality as well. One common form of smart pointer takes a pointer to a 
dynamically allocated object and assumes responsibility for deleting that object. 
The user allocates the object, but the smart pointer class deletes it. Smart pointer 
classes require that the class implement the copy-control members to manage a pointer 
to the shared object. That object is deleted only when the last smart pointer pointing 
to it is destroyed. Use counting is the most popular way to implement smart pointer classes.
</p><p>
The C++ library provides a few smarter pointer classes,
including <tt>unique_ptr</tt>, <tt>shared_ptr</tt> and
 <tt>weak_ptr</tt>. Consulte Chapter 12 for more detail.

</p></li></ol>


<p>&nbsp;</p>
<hr align="left">

</td></tr></tbody></table>


</body></html>Ytext/html    ( F ] l ~ ” š Ÿ ä',                           '6